events {
    worker_connections 1024;
}

http {
    upstream maas-frontend {
        server maas-frontend:80;
    }

    upstream app2-frontend {
        server app2-frontend:80;
    }

    upstream session-manager {
        server session-manager:8080;
    }

    upstream maas-backend {
        server 10.48.119.165:5240;
    }

    # MAAS subdomain - protected
    server {
        listen 80;
        server_name maas.*;

        # Authentication check
        location /auth {
            internal;
            proxy_pass http://session-manager/verify-and-inject;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Original-Remote-Addr $remote_addr;
            proxy_set_header X-Original-Host $host;
        }

        # Proxy MAAS backend API requests
        location /MAAS/ {
            auth_request /auth;
            
            # Pass authentication headers to backend
            auth_request_set $user_email $upstream_http_x_user_email;
            auth_request_set $user_identity $upstream_http_x_user_identity;
            auth_request_set $authenticated $upstream_http_x_authenticated;
            
            proxy_set_header X-User-Email $user_email;
            proxy_set_header X-User-Identity $user_identity;
            proxy_set_header X-Authenticated $authenticated;
            
            proxy_pass http://maas-backend/MAAS/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Handle WebSocket upgrades for MAAS
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location / {
            auth_request /auth;
            
            # Pass authentication headers to backend
            auth_request_set $user_email $upstream_http_x_user_email;
            auth_request_set $user_identity $upstream_http_x_user_identity;
            auth_request_set $authenticated $upstream_http_x_authenticated;
            
            proxy_set_header X-User-Email $user_email;
            proxy_set_header X-User-Identity $user_identity;
            proxy_set_header X-Authenticated $authenticated;
            
            proxy_pass http://maas-frontend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Handle auth errors by redirecting to login
        error_page 401 = @error401;
        location @error401 {
            # Extract base domain by removing maas. prefix
            if ($host ~ ^maas\.(.+)$) {
                set $base_domain $1;
            }
            return 302 http://$base_domain/login?next_url=http://$host$request_uri;
        }
    }

    # App2 subdomain - protected
    server {
        listen 80;
        server_name app2.*;

        # Authentication check
        location /auth {
            internal;
            proxy_pass http://session-manager/verify-and-inject;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Original-Remote-Addr $remote_addr;
            proxy_set_header X-Original-Host $host;
        }

        location / {
            auth_request /auth;
            
            # Pass authentication headers to backend
            auth_request_set $user_email $upstream_http_x_user_email;
            auth_request_set $user_identity $upstream_http_x_user_identity;
            auth_request_set $authenticated $upstream_http_x_authenticated;
            
            proxy_set_header X-User-Email $user_email;
            proxy_set_header X-User-Identity $user_identity;
            proxy_set_header X-Authenticated $authenticated;
            
            proxy_pass http://app2-frontend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Handle auth errors by redirecting to login
        error_page 401 = @error401;
        location @error401 {
            # Extract base domain by removing app2. prefix
            if ($host ~ ^app2\.(.+)$) {
                set $base_domain $1;
            }
            return 302 http://$base_domain/login?next_url=http://$host$request_uri;
        }
    }

    # Default/main domain - authentication endpoints and landing page
    server {
        listen 80 default_server;
        server_name _;

        root /usr/share/nginx/html;
        index index.html;

        # Authentication endpoints - proxy to session manager
        location ~ ^/(login|callback|logout|user|verify-and-inject|debug-cookies) {
            proxy_pass http://session-manager;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Original-URI $request_uri;
        }

        # Static content
        location / {
            try_files $uri $uri/ /index.html;
        }
    }
}